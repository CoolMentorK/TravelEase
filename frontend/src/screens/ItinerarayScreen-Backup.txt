import React, { useEffect, useState } from 'react';
import { View, StyleSheet, FlatList, Text, ActivityIndicator, Alert } from 'react-native';
import axios from 'axios';
import { COLORS } from '../constants/colors.ts';
import getEnvVars from "../../config.tsx";

const {AI_API_URL } = getEnvVars();

interface Activity {
  address: string;
  best_time_to_visit: string;
  category: string;
  cost_usd: number;
  description: string;
  duration_hours: number;
  name: string;
  notes: string;
  opening_hours: string;
}

interface Day {
  day: number;
  activities: Activity[];
}

interface Itinerary {
  itinerary: Day[];
  metadata: {
    num_activities: number;
    processing_time_ms: number;
  };
  summary: {
    total_cost_usd: number;
    total_distance_km: number;
    total_duration_hours: number;
  };
}

export default function ItineraryScreen() {
  const [loading, setLoading] = useState(true);
  const [itinerary, setItinerary] = useState<Itinerary | null>(null);

  // Replace with dynamic values or pass via route.params
  const requestBody = {
    location: 'Galle',
    interests: ['nightlife', 'party'],
    days: 1,
    budget: 40,
    suitable_for: 'Nightlife seekers',
  };

  useEffect(() => {
    const fetchItinerary = async () => {
      try {
        const response = await axios.post(`${AI_API_URL}/api/itinerary/suggest`, requestBody);
        setItinerary(response.data);
      } catch (error) {
        Alert.alert('Error', 'Failed to fetch itinerary. Please try again later.');
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchItinerary();
  }, []);

  if (loading) {
    return (
        <View style={[styles.container, { justifyContent: 'center', alignItems: 'center' }]}>
          <ActivityIndicator size="large" color={COLORS.primary} />
          <Text>Loading itinerary...</Text>
        </View>
    );
  }

  if (!itinerary) {
    return (
        <View style={styles.container}>
          <Text style={{ color: COLORS.error, textAlign: 'center', marginTop: 40 }}>
            No itinerary found.
          </Text>
        </View>
    );
  }

  return (
      <View style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>My Trip</Text>
        </View>
        <FlatList
            data={itinerary.itinerary}
            keyExtractor={item => `day-${item.day}`}
            renderItem={({ item }) => (
                <View style={styles.daySection}>
                  <Text style={styles.dayTitle}>Day {item.day}</Text>
                  {item.activities.map((act: Activity, idx: number) => (
                      <View key={idx} style={styles.activityCard}>
                        <View style={styles.cardHeaderRow}>
                          <Text style={styles.activityName}>{act.name}</Text>
                          <Text style={styles.activityCategory}>{act.category}</Text>
                        </View>
                        <Text style={styles.activityDesc}>{act.description}</Text>
                        <View style={styles.cardDetailsRow}>
                          <Text style={styles.activityDetail}>Address: {act.address}</Text>
                          <Text style={styles.activityDetail}>Best Time: {act.best_time_to_visit}</Text>
                        </View>
                        <View style={styles.cardDetailsRow}>
                          <Text style={styles.activityDetail}>Opening Hours: {act.opening_hours}</Text>
                          <Text style={styles.activityDetail}>Duration: {act.duration_hours} hours</Text>
                        </View>
                        <Text style={styles.activityDetail}>Notes: {act.notes}</Text>
                        <Text style={styles.activityCost}>Cost: ${act.cost_usd.toFixed(2)} USD</Text>
                      </View>
                  ))}
                </View>
            )}
            ListFooterComponent={
              <View style={styles.summarySection}>
                <Text style={styles.summaryTitle}>Summary</Text>
                <Text style={styles.summaryText}>
                  Total Cost: ${itinerary.summary.total_cost_usd.toFixed(2)} USD
                </Text>
                <Text style={styles.summaryText}>
                  Total Duration: {itinerary.summary.total_duration_hours} hours
                </Text>
                <Text style={styles.summaryText}>
                  Total Distance: {itinerary.summary.total_distance_km} km
                </Text>
                <Text style={styles.summaryText}>
                  Number of Activities: {itinerary.metadata.num_activities}
                </Text>
              </View>
            }
            contentContainerStyle={styles.listContent}
        />
      </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: COLORS.background,
    flex: 1,
  },
  header: {
    backgroundColor: COLORS.primary,
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
    elevation: 4,
    padding: 24,
    paddingTop: 48,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
  },
  headerTitle: {
    color: COLORS.surface,
    fontSize: 30,
    fontWeight: 'bold',
    letterSpacing: 0.5,
    marginBottom: 18,
  },
  daySection: {
    marginBottom: 8,
    marginHorizontal: 16,
    marginTop: 18,
  },
  dayTitle: {
    color: COLORS.primary,
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  activityCard: {
    backgroundColor: COLORS.surface,
    borderRadius: 12,
    elevation: 2,
    marginBottom: 10,
    padding: 14,
  },
  cardHeaderRow: {
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  activityName: {
    color: COLORS.text,
    fontSize: 17,
    fontWeight: 'bold',
  },
  activityCategory: {
    color: COLORS.accent,
    fontSize: 13,
    marginBottom: 2,
  },
  activityDesc: {
    color: COLORS.secondaryText,
    fontSize: 14,
    marginBottom: 2,
  },
  cardDetailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 2,
  },
  activityDetail: {
    color: COLORS.mediumGray,
    fontSize: 13,
  },
  activityCost: {
    color: COLORS.success,
    fontSize: 14,
    fontWeight: 'bold',
    marginTop: 4,
  },
  summarySection: {
    backgroundColor: COLORS.lightGray,
    borderRadius: 12,
    marginHorizontal: 16,
    marginTop: 24,
    padding: 16,
  },
  summaryTitle: {
    color: COLORS.primary,
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  summaryText: {
    color: COLORS.text,
    fontSize: 15,
    marginBottom: 2,
  },
  listContent: {
    paddingBottom: 40,
  },
});
